pipeline {
    agent any
    environment{
        DATABASE_URI = credentials("DATABASE_URI")
        DB_PASSWORD = credentials("DB_PASSWORD")
        AUTHOR = credentials("AUTHOR")
        app_version = '2.0'
        rollback = 'false'
        replicas = 3
    }
    stages {
        stage('Testing') {
            steps{
                script{
                    if (env.rollback == 'false'){
                        sh 'bash jenkins/test.sh'
                    }
                }
            }
        }
        stage('Build & Push') {
            steps {
                script {
                    if (env.rollback == 'false'){
                        withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                            docker.withRegistry('https://registry.hub.docker.com', 'docker-hub-credentials') {
                                sh "docker logout"
                                sh "docker login -u ${USERNAME} -p ${PASSWORD} https://registry.hub.docker.com"
                                sh "docker-compose build --parallel --build-arg APP_VERSION=${env.app_version} && docker-compose push"
                                sh 'docker system prune -af'
                                //sh 'bash jenkins/build_images.sh'
                            }

                        }
                    }
                }
            }
        }
        stage('Config Management (ansible)') {
            steps {
                // write out playbook, inventory
                // with roles
                // ssh keys generated from jenkins machine for jenkins user (ssh-keygen)
                // sudo su - jenkins, install ansible on this machine for jenkins
                // jenkins runs playbook
                sh 'cd ansible && /home/jenkins/.local/bin/ansible-playbook -i inventory playbook.yaml'
            }
        }
        stage('Deploy') {
            steps {
                // copy docker-compose.yaml over ssh (scp command)
                // set env variables on swarm manager
                // ssh into swarm manager to deploy the stack
                sh 'bash jenkins/deploy.sh'
            }
        }
    }

}